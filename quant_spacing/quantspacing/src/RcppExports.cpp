// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <RcppGSL.h>
#include <Rcpp.h>

using namespace Rcpp;

// c_spline
Rcpp::NumericMatrix c_spline(Rcpp::NumericMatrix quantiles, Rcpp::NumericVector alphas, Rcpp::NumericVector yp1, Rcpp::NumericVector ypp);
RcppExport SEXP _quantspacing_c_spline(SEXP quantilesSEXP, SEXP alphasSEXP, SEXP yp1SEXP, SEXP yppSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type quantiles(quantilesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type yp1(yp1SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type ypp(yppSEXP);
    rcpp_result_gen = Rcpp::wrap(c_spline(quantiles, alphas, yp1, ypp));
    return rcpp_result_gen;
END_RCPP
}
// matrix_mult
Rcpp::NumericMatrix matrix_mult(Rcpp::NumericMatrix A, Rcpp::NumericMatrix B);
RcppExport SEXP _quantspacing_matrix_mult(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type A(ASEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type B(BSEXP);
    rcpp_result_gen = Rcpp::wrap(matrix_mult(A, B));
    return rcpp_result_gen;
END_RCPP
}
// transpose
Rcpp::NumericMatrix transpose(Rcpp::NumericMatrix A);
RcppExport SEXP _quantspacing_transpose(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(transpose(A));
    return rcpp_result_gen;
END_RCPP
}
// invert_two
Rcpp::NumericMatrix invert_two(Rcpp::NumericMatrix A);
RcppExport SEXP _quantspacing_invert_two(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(invert_two(A));
    return rcpp_result_gen;
END_RCPP
}
// c_splint
Rcpp::NumericVector c_splint(Rcpp::NumericVector y, Rcpp::NumericMatrix quantiles, Rcpp::NumericVector alphas, Rcpp::NumericMatrix y2, Rcpp::NumericMatrix tail_param_u, Rcpp::NumericMatrix tail_param_l, std::string tails, Rcpp::IntegerVector distn);
RcppExport SEXP _quantspacing_c_splint(SEXP ySEXP, SEXP quantilesSEXP, SEXP alphasSEXP, SEXP y2SEXP, SEXP tail_param_uSEXP, SEXP tail_param_lSEXP, SEXP tailsSEXP, SEXP distnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type quantiles(quantilesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type y2(y2SEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type tail_param_u(tail_param_uSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type tail_param_l(tail_param_lSEXP);
    Rcpp::traits::input_parameter< std::string >::type tails(tailsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type distn(distnSEXP);
    rcpp_result_gen = Rcpp::wrap(c_splint(y, quantiles, alphas, y2, tail_param_u, tail_param_l, tails, distn));
    return rcpp_result_gen;
END_RCPP
}
// spacingsToQuantiles_C
arma::mat spacingsToQuantiles_C(arma::mat spacingCoef, arma::mat data, int jstar);
RcppExport SEXP _quantspacing_spacingsToQuantiles_C(SEXP spacingCoefSEXP, SEXP dataSEXP, SEXP jstarSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type spacingCoef(spacingCoefSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type jstar(jstarSEXP);
    rcpp_result_gen = Rcpp::wrap(spacingsToQuantiles_C(spacingCoef, data, jstar));
    return rcpp_result_gen;
END_RCPP
}
// c_spline_quant_comb
arma::mat c_spline_quant_comb(arma::vec y, arma::mat quantiles, arma::vec alphas, std::string tails, arma::vec distn);
RcppExport SEXP _quantspacing_c_spline_quant_comb(SEXP ySEXP, SEXP quantilesSEXP, SEXP alphasSEXP, SEXP tailsSEXP, SEXP distnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type quantiles(quantilesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< std::string >::type tails(tailsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type distn(distnSEXP);
    rcpp_result_gen = Rcpp::wrap(c_spline_quant_comb(y, quantiles, alphas, tails, distn));
    return rcpp_result_gen;
END_RCPP
}
// c_spline_comb
arma::mat c_spline_comb(arma::vec y, arma::mat quantiles, arma::vec alphas, std::string tails, arma::vec distn);
RcppExport SEXP _quantspacing_c_spline_comb(SEXP ySEXP, SEXP quantilesSEXP, SEXP alphasSEXP, SEXP tailsSEXP, SEXP distnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type quantiles(quantilesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< std::string >::type tails(tailsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type distn(distnSEXP);
    rcpp_result_gen = Rcpp::wrap(c_spline_comb(y, quantiles, alphas, tails, distn));
    return rcpp_result_gen;
END_RCPP
}
// c_spline_comb_track
arma::mat c_spline_comb_track(arma::vec y, arma::mat quantiles, arma::vec alphas, std::string tails, arma::vec distn);
RcppExport SEXP _quantspacing_c_spline_comb_track(SEXP ySEXP, SEXP quantilesSEXP, SEXP alphasSEXP, SEXP tailsSEXP, SEXP distnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type quantiles(quantilesSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type alphas(alphasSEXP);
    Rcpp::traits::input_parameter< std::string >::type tails(tailsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type distn(distnSEXP);
    rcpp_result_gen = Rcpp::wrap(c_spline_comb_track(y, quantiles, alphas, tails, distn));
    return rcpp_result_gen;
END_RCPP
}
// c_splincomb
Rcpp::NumericVector c_splincomb(Rcpp::NumericVector y, Rcpp::NumericMatrix quantiles_full, Rcpp::NumericVector alphas_full, std::string tails, Rcpp::IntegerVector distn);
RcppExport SEXP _quantspacing_c_splincomb(SEXP ySEXP, SEXP quantiles_fullSEXP, SEXP alphas_fullSEXP, SEXP tailsSEXP, SEXP distnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type quantiles_full(quantiles_fullSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type alphas_full(alphas_fullSEXP);
    Rcpp::traits::input_parameter< std::string >::type tails(tailsSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type distn(distnSEXP);
    rcpp_result_gen = Rcpp::wrap(c_splincomb(y, quantiles_full, alphas_full, tails, distn));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_quantspacing_c_spline", (DL_FUNC) &_quantspacing_c_spline, 4},
    {"_quantspacing_matrix_mult", (DL_FUNC) &_quantspacing_matrix_mult, 2},
    {"_quantspacing_transpose", (DL_FUNC) &_quantspacing_transpose, 1},
    {"_quantspacing_invert_two", (DL_FUNC) &_quantspacing_invert_two, 1},
    {"_quantspacing_c_splint", (DL_FUNC) &_quantspacing_c_splint, 8},
    {"_quantspacing_spacingsToQuantiles_C", (DL_FUNC) &_quantspacing_spacingsToQuantiles_C, 3},
    {"_quantspacing_c_spline_quant_comb", (DL_FUNC) &_quantspacing_c_spline_quant_comb, 5},
    {"_quantspacing_c_spline_comb", (DL_FUNC) &_quantspacing_c_spline_comb, 5},
    {"_quantspacing_c_spline_comb_track", (DL_FUNC) &_quantspacing_c_spline_comb_track, 5},
    {"_quantspacing_c_splincomb", (DL_FUNC) &_quantspacing_c_splincomb, 5},
    {NULL, NULL, 0}
};

RcppExport void R_init_quantspacing(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
